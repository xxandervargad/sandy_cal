// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  phone            String   @unique
  name             String?
  isPhoneVerified  Boolean  @default(false)
  phoneVerifiedAt  DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  dayRatings       DayRating[]
  
  // Friendship relations
  friendshipsInitiated Friendship[] @relation("UserFriendships")
  friendshipsReceived  Friendship[] @relation("FriendFriendships")
}

model DayRating {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime // This will be floored to the day
  rating    Int      // Rating as integer for flexibility
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@index([userId, date])
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String   // User who initiated the friendship
  friendId  String   // User who received the friendship
  createdAt DateTime @default(now())
  
  user   User @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendFriendships", fields: [friendId], references: [id], onDelete: Cascade)
  
  // Ensure unique friendships - no duplicate pairs
  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}
